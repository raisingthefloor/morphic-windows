# Morphic for Windows (.NET Desktop)

# Documentation used in this pipeline:
# .NET pipelines docs: 
# - Build, test, and deploy: https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core
# - .NET pipelines tasks: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/
# Microsoft-hosted agents: https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
# - Windows 2022 components and version options: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
# .NET Core release versions: https://github.com/dotnet/core/blob/main/release-notes/releases-index.json
# .NET Core RIDs (including x86/x64/ARM64): https://docs.microsoft.com/en-us/dotnet/core/rid-catalog

# NOTE: we name the builds using a semver-compatible scheme; with the exception of publicly-released builds, this includes the current date in the build #
# release: major.minor.patch.0
#  canary: major.minor.patch.0-canary+YYDDD.BBB (where DDD is the day of year; where BBB is the build run # within the day, starting at one)
#     dev: major.minor.patch.0-dev+YYDDD.BBB (where DDD is the day of year; where BBB is the build run # within the day, starting at one)
name: $(Year:yy)$(DayOfYear).$(Rev:r)

trigger:
  branches:
    include:
    # TODO: before Morphic 2.0 RTM, limit the branches that are automatically built (e.g. "canary" [develop*] and release [release*], etc.)
#      - master
      - '*'

# TODO: before Morphic 2.0 RTM, determine when we want builds to happen (i.e. in PRs, we'd build the "dev*" releases)
pr:
  branches:
    include:
    - '*'
    
variables:
# Import all Amazon S3 upload credentials and settings
- group: 's3-public-bucket-upload'
# Import all the code-signing variables (from the Library)
- group: 'windows-code-sign'
- name: mainProject
  value: Morphic/Morphic.csproj
- name: projects
  value: |
         Morphic.Windows.Native/Morphic.Windows.Native.csproj
         Morphic/Morphic.csproj
  
# TODO: these are temporary values; replace them with actual (semver-compatible) values for production
- name: versionMajor
  value: 2
- name: versionMinor
  value: 0
- name: versionBuild
  value: 0
- name: versionRevision
  value: 9999

stages:
  - stage: build
    jobs:
      - job: build
        pool:
          vmImage: 'windows-2022'
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK 6.0.100'
          inputs:
            packageType: sdk
            version: 6.0.100
            installationPath: $(Agent.ToolsDirectory)/dotnet

        # TODO: this step may technically not be necessary; test the build process without it
        - task: DotNetCoreCLI@2
          displayName: 'dotnet restore'
          inputs:
            command: restore
            projects: '$(projects)'
        
        # TODO: switch to "dotnet build" (DotNetCoreCLI@2) once Microsoft supports it for Windows App SDK applications; in the meantime, we use msbuild
        # TODO: this step may technically not be necessary; test the build process without it
        # TODO: this step may just be building the x86 or ANYCPU variant (whatever the default is), rather than building all three sets of artifacts
        - task: MSBuild@1
          displayName: 'msbuild'
          inputs:
           solution: '$(mainProject)'
           configuration: release

        - powershell: |
            # Update MorphicPackage's appmanifest with a version number before building it
            [xml]$manifest= get-content ".\Morphic (Package)\Package.appxmanifest"
            $manifest.Package.Identity.Version = "$(versionMajor).$(versionMinor).$(versionBuild).$(versionRevision)"    
            $manifest.save("Morphic (Package)/Package.appxmanifest")
          displayName: 'Assign version to package manifest'

        - task: MSBuild@1
          displayName: 'Package MSIX (x86)'
          inputs:
            solution: 'Morphic (Package)/Morphic (Package).wapproj'
            platform: x86
            configuration: Release
            msbuildArguments: '/p:OutputPath=NonPackagedApp /p:UapAppxPackageBuildMode=SideLoadOnly  /p:AppxBundle=Never /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\MorphicSetup-x86.msix /p:AppxPackageSigningEnabled=false'

        - task: MSBuild@1
          displayName: 'Package MSIX (x64)'
          inputs:
            solution: 'Morphic (Package)/Morphic (Package).wapproj'
            platform: x64
            configuration: Release
            msbuildArguments: '/p:OutputPath=NonPackagedApp /p:UapAppxPackageBuildMode=SideLoadOnly  /p:AppxBundle=Never /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\MorphicSetup-x64.msix /p:AppxPackageSigningEnabled=false'

        - task: MSBuild@1
          displayName: 'Package MSIX (arm64)'
          inputs:
            solution: 'Morphic (Package)/Morphic (Package).wapproj'
            platform: arm64
            configuration: Release
            msbuildArguments: '/p:OutputPath=NonPackagedApp /p:UapAppxPackageBuildMode=SideLoadOnly  /p:AppxBundle=Never /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\MorphicSetup-arm64.msix /p:AppxPackageSigningEnabled=false'

        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK 2.1'
          inputs:
            packageType: sdk
            version: 2.1.811
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: DotNetCoreCLI@2
          displayName: 'Install AzureSignTool 2.0.17'
          inputs:
            command: 'custom'
            custom: 'tool'
            arguments: 'install --global --version 2.0.17 azuresigntool'

# ### SIGNING NOTE (applicable to all signed files) ###
# NOTE: if we experience downtime with our cert provider's timestamp servers (which causes signing to fail), 
#       we can use the test server (production timestamps, but from a 2nd provider); note that we should NOT do
#       this for any public preview or release builds...only for internal testing or emergency scenarios.
#              -tr "$(TimestampUrl)"
#              -tr "$(TimestampUrl2)"
#              vs.
#              -tr "$(TestOnlyTimestampUrl)"

        - task: CmdLine@2
          displayName: 'Sign MSIX (x86)'
          inputs:
            script: >
              AzureSignTool sign
              -d Morphic
              -du "$(SigningURL)"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -tr "$(TimestampUrl2)"
              -v $(Build.ArtifactStagingDirectory)\MorphicSetup-x86.msix

        - task: PublishPipelineArtifact@1
          displayName: "Cache MSIX (x86) for upload"
          inputs:
            targetPath: $(Build.ArtifactStagingDirectory)\MorphicSetup-x86.msix
            artifactName: msix-x86
            artifactType: pipeline

        - task: CmdLine@2
          displayName: 'Sign MSIX (x64)'
          inputs:
            script: >
              AzureSignTool sign
              -d Morphic
              -du "$(SigningURL)"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -tr "$(TimestampUrl2)"
              -v $(Build.ArtifactStagingDirectory)\MorphicSetup-x64.msix

        - task: PublishPipelineArtifact@1
          displayName: "Cache MSIX (x64) for upload"
          inputs:
            targetPath: $(Build.ArtifactStagingDirectory)\MorphicSetup-x64.msix
            artifactName: msix-x64
            artifactType: pipeline

        - task: CmdLine@2
          displayName: 'Sign MSIX (arm64)'
          inputs:
            script: >
              AzureSignTool sign
              -d Morphic
              -du "$(SigningURL)"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -tr "$(TimestampUrl2)"
              -v $(Build.ArtifactStagingDirectory)\MorphicSetup-arm64.msix

        - task: PublishPipelineArtifact@1
          displayName: "Cache MSIX (arm64) for upload"
          inputs:
            targetPath: $(Build.ArtifactStagingDirectory)\MorphicSetup-arm64.msix
            artifactName: msix-arm64
            artifactType: pipeline

