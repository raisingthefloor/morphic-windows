# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

# name controls the Build.BuildNumber variable
# We'll use the BuildNumber as the final two components of our app's version number
#
# App version number componnents can only be 5 digits or the build fails
# So we'll design a number using a 2 digit year and 3 digit day of year
# 
# NOTE: The documentation isn't clear if DayOfYear is always three digits, so
# we'll need to watch this.
#
# NOTE: A two-digit year is less than ideal, but we find ourselves in year 20
# and it's unlikely this will be around in 80 more years
name: $(Year:yy)$(DayOfYear).$(Rev:r)

trigger:
  branches:
    include:
      - master
      - "release/*"
      - "staging/*"

pool:
  vmImage: 'windows-latest'

variables:
# must be created in the azure UI under Pipelines > Library and specify accessKey, secretKey, region, and bucket
- group: 's3-public-bucket-upload'
# Holds all signing-related variables. Provide them the same was as the var group above.
- group: 'windows-code-sign'
- name: solution
  value: '**/*.sln'
- name: projects
  value: '**/*proj'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: versionBuildComponents
  value: '.$(Build.BuildNumber)'

#resources:
#  repositories:
#    - repository: deploy-morphicweb
#      type: github
#      endpoint: raisingthefloor
#      name: raisingthefloor/deploy-morphicweb
#      ref: master

stages:
  - stage: build
    jobs:
      - job: build
        steps:

        - task: UseDotNet@2
          displayName: 'Use .NET SDK 5.0.301'
          inputs:
            packageType: sdk
            version: 5.0.301
            installationPath: $(Agent.ToolsDirectory)/dotnet

        # Set a $(BUILD_TYPE) variable
        - bash: |
            BUILD_TYPE="Development"
            if [[ "${BRANCH}" == *"staging/"* ]]; then
              BUILD_TYPE="Staging"
            elif [[ "${BRANCH}" == *"release/"* ]]; then
              BUILD_TYPE="Production"
            fi
            echo "##vso[task.setvariable variable=BUILD_TYPE]${BUILD_TYPE}"
          env:
            BRANCH: $(Build.SourceBranch)
            BRANCH_NAME: $(Build.SourceBranchName)
        
        - task: NuGetToolInstaller@1
        
        - task: NuGetCommand@2
          displayName: "restore solutions"
          inputs:
            restoreSolution: '$(solution)'
        
        - task: NuGetCommand@2
          displayName: "restore projects"
          inputs:
            restoreSolution: '$(projects)'
        
        - task: Bash@3
          displayName: "write build info"
          env:
            BRANCH: $(Build.SourceBranch)
            BRANCH_NAME: $(Build.SourceBranchName)
            COMMIT: $(Build.SourceVersion)
            BUILD_NUM: $(Build.BuildNumber)
          inputs:
            targetType: 'filePath'
            filePath: set-build-info.sh
        
        - task: VSBuild@1
          displayName: "build solutions"
          env:
            VERSIONBUILDCOMPONENTS: '$(versionBuildComponents)'
          inputs:
            solution: '$(solution)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
            msbuildArgs: '/p:BuildType=$(BUILD_TYPE)'
        
        - task: VSTest@2
          displayName: "execute tests"
          inputs:
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: Publish Morphic Client
          inputs:
            command: publish
            publishWebProjects: false
            zipAfterPublish: false
            projects: 'Morphic.Client/Morphic.Client.csproj'
            arguments: '-f netcoreapp3.1 -r win-x64 -c $(buildConfiguration) -p:BuildType=$(BUILD_TYPE)'

        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK 2.1.816'
          inputs:
            packageType: sdk
            version: 2.1.816
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: DotNetCoreCLI@2
          displayName: Install AzureSignTool
          inputs:
            command: 'custom'
            custom: 'tool'
            arguments: 'install --global azuresigntool'

        - task: CmdLine@2
          inputs:
            targetType: 'inline'
            script: >
              tree $(Build.SourcesDirectory)\Morphic.Client\bin /f
              
        - task: CmdLine@2
          displayName: 'sign morphic client exe'
          inputs:
            targetType: 'inline'
# NOTE: if we experience downtime with our cert provider's timestamp servers (which causes signing to fail), 
#       we can use the test server (production timestamps, but from a 2nd provider); note that we should NOT do
#       this for any public preview or release builds...only for internal testing or emergency scenarios.
#              -tr "$(TimestampUrl)"
#              -tr "$(TimestampUrl2)"
#              vs.
#              -tr "$(TestOnlyTimestampUrl)"
            script: >
              AzureSignTool sign
              -d Morphic
              -du "$(SigningURL)"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -tr "$(TimestampUrl2)"
              -v
              $(Build.SourcesDirectory)\Morphic.Client\bin\$(buildConfiguration)\netcoreapp3.1\win-x64\publish\Morphic.exe
        
        - task: UseDotNet@2
          displayName: 'Use .NET SDK 5.0.301'
          inputs:
            packageType: sdk
            version: 5.0.301
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: VSBuild@1
          displayName: "build x64 installer"
          env:
            VERSIONBUILDCOMPONENTS: '$(versionBuildComponents)'
          inputs:
            solution: 'Morphic.Setup\Morphic.Setup.wixproj'
            platform: 'x64'
            configuration: '$(buildConfiguration)'
            msbuildArgs: '/p:BuildType=$(BUILD_TYPE) /p:BuildProjectReferences=false'

        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK 2.1.816'
          inputs:
            packageType: sdk
            version: 2.1.816
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: CmdLine@2
          displayName: 'sign x64 installer'
          inputs:
            targetType: 'inline'
# NOTE: if we experience downtime with our cert provider's timestamp servers (which causes signing to fail), 
#       we can use the test server (production timestamps, but from a 2nd provider); note that we should NOT do
#       this for any public preview or release builds...only for internal testing or emergency scenarios.
#              -tr "$(TimestampUrl)"
#              -tr "$(TimestampUrl2)"
#              vs.
#              -tr "$(TestOnlyTimestampUrl)"
            script: >
              AzureSignTool sign
              -d Morphic
              -du "$(SigningURL)"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -tr "$(TimestampUrl2)"
              -v $(System.DefaultWorkingDirectory)\Morphic.Setup\bin\Release\x64\MorphicSetup.msi
        - publish: $(System.DefaultWorkingDirectory)\Morphic.Setup\bin\Release\x64\MorphicSetup.msi
          displayName: "save x64 installer for later"
          artifact: x64-installer

        - publish: $(System.DefaultWorkingDirectory)\Morphic.Client\BuildVersion.txt
          displayName: "save build version numbers"
          artifact: build-version
            
  - stage: upload
    jobs:
      - job: publish_installer
        pool:
          vmImage: "ubuntu-18.04"
        steps:
#          # We actually want to operate in the web project so we can update URLs (when necessary)
#          - checkout: deploy-morphicweb
#            persistCredentials: true
#            path: deploy-morphicweb
          - download: current
            artifact: x64-installer
          - download: current
            artifact: build-version
          - task: Bash@3
            displayName: "upload MSI to s3"
            env:
              AWS_ACCESS_KEY_ID: $(accessKey)
              AWS_SECRET_ACCESS_KEY: $(secretKey)
              BUCKET: $(bucket)
              AWS_DEFAULT_REGION: $(region)
              BRANCH: $(Build.SourceBranch)
              BRANCH_NAME: $(Build.SourceBranchName)
            inputs:
              targetType: 'inline'
              script: |
                set -e
                set -x

                EXTRA_ARGS=""
                S3_OBJECT_PREFIX=""

                if [[ "${BRANCH_NAME}" == "master" ]]; then
                  echo "detected master build"
                  S3_OBJECT_PREFIX="win/x64/edge"
                  EXTRA_ARGS="--expires $(date -d '+42 days' --iso-8601=seconds)"
                elif [[ "${BRANCH}" == *"staging/"* ]]; then
                  echo "detected staging build"
                  S3_OBJECT_PREFIX="win/x64/staging"
                  EXTRA_ARGS="--expires $(date -d '+14 days' --iso-8601=seconds)"
                elif [[ "${BRANCH}" == *"release/"* ]]; then
                  echo "detected release build"
                  S3_OBJECT_PREFIX="win/x64/stable"
                else
                  echo "detected PR build"
                  S3_OBJECT_PREFIX="win/x64/internal"
                  EXTRA_ARGS="--expires $(date -d '+2 days' --iso-8601=seconds)"
                fi

                S3_PUBLISHED_HTTP_URL="https://d23vryjv7k8eyb.cloudfront.net"

                publishInstaller() {
                  VERSION=$(sed -n 1p ${AGENT_BUILDDIRECTORY}/build-version/BuildVersion.txt | tr -d [:space:])
                  ASSEMBLY_VERSION=$(sed -n 2p ${AGENT_BUILDDIRECTORY}/build-version/BuildVersion.txt | tr -d [:space:])
                  LOCAL_MSI_SOURCE="${AGENT_BUILDDIRECTORY}/${LOCAL_MSI_DIR}/${INSTALLER_NAME_BASE}.msi"
                  LOCAL_APPCAST_SOURCE="${AGENT_BUILDDIRECTORY}/${INSTALLER_NAME_BASE}-v${VERSION}.appcast.xml"
                  S3_MSI_OBJECT_NAME="${S3_OBJECT_PREFIX}/${INSTALLER_NAME_BASE}-v${VERSION}.msi"
                  S3_APPCAST_OBJECT_NAME="${S3_OBJECT_PREFIX}/${INSTALLER_NAME_BASE}-v${VERSION}.appcast.xml"

                  cat > "${LOCAL_APPCAST_SOURCE}" <<EOF
                <?xml version="1.0" encoding="utf-8"?>
                <item>
                    <version>${ASSEMBLY_VERSION}</version>
                    <url>${S3_PUBLISHED_HTTP_URL}/${S3_MSI_OBJECT_NAME}</url>
                </item>
                EOF

                  echo ${S3_PUBLISHED_HTTP_URL}/${S3_APPCAST_OBJECT_NAME}
                  cat "${LOCAL_APPCAST_SOURCE}"

                  ls -al ${AGENT_BUILDDIRECTORY}
                  aws s3 cp $EXTRA_ARGS "${LOCAL_MSI_SOURCE}" "s3://${BUCKET}/${S3_MSI_OBJECT_NAME}"
                  aws s3 cp $EXTRA_ARGS "${LOCAL_APPCAST_SOURCE}" "s3://${BUCKET}/${S3_APPCAST_OBJECT_NAME}"
                }

                INSTALLER_NAME_BASE="MorphicSetup"
                LOCAL_MSI_DIR="x64-installer"
                publishInstaller

                MORPHIC_S3_MSI_OBJECT_NAME=$S3_MSI_OBJECT_NAME
                MORPHIC_S3_APPCAST_OBJECT_NAME=$S3_APPCAST_OBJECT_NAME


#                # TODO: do we want this to update staging and prod automatically, depending on branch?
#                if [[ "${BRANCH_NAME}" == "master" ]]; then
#                  echo "updating dev environment urls"
#                  # azure checks out headlessly, so we need to swap to the branch
#                  git checkout ${BRANCH_NAME}
#
#                  TO_EDIT=environments/dev/patches/set-env.yaml
#
#                  # client
#                  go run update-env-var.go ${TO_EDIT} "MORPHIC_WINDOWS_DOWNLOAD_URL" "${S3_PUBLISHED_HTTP_URL}/${MORPHIC_S3_MSI_OBJECT_NAME}"
#                  go run update-env-var.go ${TO_EDIT} "MORPHIC_WINDOWS_APPCAST_URL" "${S3_PUBLISHED_HTTP_URL}/${MORPHIC_S3_APPCAST_OBJECT_NAME}"
#
#                  git config --global user.email "buildmaster@raisingthefloor.org"
#                  git config --global user.name "buildmaster"
#                  git commit ${TO_EDIT} -m "buildmaster: updating windows client urls"
#                  git push
#                fi
